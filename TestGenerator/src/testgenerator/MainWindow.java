/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package testgenerator;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
/**
 *
 * @author Ariel
 */
public class MainWindow extends javax.swing.JFrame {

    List<TestFile> testFiles;
    List<SourceFile> sourceFiles;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        testFiles = new LinkedList<>();
        sourceFiles = new LinkedList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        originalCodeTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        testCodeTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        fileList = new java.awt.List();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openProjectMenuItem = new javax.swing.JMenuItem();
        openFileMenuItem = new javax.swing.JMenuItem();
        saveOneFileMenuItem = new javax.swing.JMenuItem();
        saveAllMenuItem = new javax.swing.JMenuItem();
        saveProjectMenuItem = new javax.swing.JMenuItem();
        closeOneFileMenuItem = new javax.swing.JMenuItem();
        closeAllFilesMenuItem = new javax.swing.JMenuItem();
        closeProjectFilesMenuItem = new javax.swing.JMenuItem();
        closeMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        inputTestGeneratorMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        originalCodeTextArea.setColumns(20);
        originalCodeTextArea.setRows(5);
        jScrollPane1.setViewportView(originalCodeTextArea);

        testCodeTextArea.setColumns(20);
        testCodeTextArea.setRows(5);
        testCodeTextArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                testCodeTextAreaFocusLost(evt);
            }
        });
        testCodeTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                testCodeTextAreaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                testCodeTextAreaKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(testCodeTextArea);

        jLabel1.setText("Kod źródłowy orginalnego pliku:");

        jLabel2.setText("Kod źródłowy wygenerowanego pliku testowego:");

        jLabel3.setText("Lista plików:");

        fileList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileListMouseClicked(evt);
            }
        });

        jMenu1.setText("Plik");

        openProjectMenuItem.setText("Otwórz projekt NetBeans");
        openProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openProjectMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(openProjectMenuItem);

        openFileMenuItem.setText("Otwórz plik *.java");
        openFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(openFileMenuItem);

        saveOneFileMenuItem.setText("Zapisz aktualny plik");
        saveOneFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveOneFileMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveOneFileMenuItem);

        saveAllMenuItem.setText("Zapisz wszytkie pliki");
        saveAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAllMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveAllMenuItem);

        saveProjectMenuItem.setText("Zapisz pliki projektu");
        saveProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProjectMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveProjectMenuItem);

        closeOneFileMenuItem.setText("Zamknij plik");
        closeOneFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeOneFileMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(closeOneFileMenuItem);

        closeAllFilesMenuItem.setText("Zamknij wszystkie pliki");
        closeAllFilesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeAllFilesMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(closeAllFilesMenuItem);

        closeProjectFilesMenuItem.setText("Zamknij pliki projektu");
        closeProjectFilesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeProjectFilesMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(closeProjectFilesMenuItem);

        closeMenuItem.setText("Zamknij program");
        closeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(closeMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edycja");

        inputTestGeneratorMenuItem.setText("Generuj ogólne testy wejścia");
        inputTestGeneratorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTestGeneratorMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(inputTestGeneratorMenuItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(fileList, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fileList, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openProjectMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File sourceFolder = chooser.getSelectedFile();
            String packageName = sourceFolder.getName();
            List<File> listaPlikow = getFileList(sourceFolder);
            for(File f : listaPlikow)
            {
                try {
                    Scanner in = new Scanner(f);
                    String source = "";
                    while(in.hasNext()) {
                        source += in.nextLine() + "\n";
                    }
                    TestFile fil = new TestFile(source, f.getName(), packageName);
                    SourceFile sil = new SourceFile(f.getName(), f.getAbsolutePath(), source, packageName);
                    testFiles.add(fil);
                    sourceFiles.add(sil);
                    fileList.add(sil.packageName + "/" + sil.name);
                    
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
    }//GEN-LAST:event_openProjectMenuItemActionPerformed

    private void testCodeTextAreaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_testCodeTextAreaFocusLost
        
        
    }//GEN-LAST:event_testCodeTextAreaFocusLost

    private void openFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = chooser.showOpenDialog(this);
        String newFileName = "";
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File sourceFile = chooser.getSelectedFile();
            String[] extension = sourceFile.getName().split("[.]");
            if(!extension[extension.length - 1].equals("java"))
            {
                return;
            }
            try {
                Scanner in = new Scanner(sourceFile);
                String source = "";
                while(in.hasNext()) {
                    source += in.nextLine() + "\n";
                }
                newFileName = sourceFile.getName();
                testFiles.add(new TestFile(source, sourceFile.getName()));
                sourceFiles.add(new SourceFile(sourceFile.getName(), sourceFile.getAbsolutePath(), source));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        fileList.add(newFileName);
    }//GEN-LAST:event_openFileMenuItemActionPerformed

    private void closeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMenuItemActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeMenuItemActionPerformed

    private void fileListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileListMouseClicked
        String actualFile = fileList.getSelectedItem();
        if(actualFile.contains("/"))
        {
            String[] temp = actualFile.split("/");
            actualFile = temp[temp.length-1];
        }
        refreshTextAreas(actualFile);
    }//GEN-LAST:event_fileListMouseClicked

    private void closeOneFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeOneFileMenuItemActionPerformed
        String actualFileFull = fileList.getSelectedItem();
        String actualFile = actualFileFull;
        if(actualFile.contains("/"))
        {
            String[] temp = actualFile.split("/");
            actualFile = temp[temp.length-1];
        }
        List<TestFile> temp = new LinkedList<>();
        for(TestFile f : testFiles)
        {
            if(f.refFile.equals(actualFile))
            {
                temp.add(f);
            }
        }
        testFiles.removeAll(temp);
        List<SourceFile> temp2 = new LinkedList<>();
        for(SourceFile f : sourceFiles)
        {
            if(f.name.equals(actualFile))
            {
                temp2.add(f);
            }
        }
        sourceFiles.removeAll(temp);
        originalCodeTextArea.setText("");
        testCodeTextArea.setText("");
        fileList.remove(actualFileFull);
    }//GEN-LAST:event_closeOneFileMenuItemActionPerformed

    private void closeAllFilesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeAllFilesMenuItemActionPerformed
        originalCodeTextArea.setText("");
        testCodeTextArea.setText("");
        fileList.removeAll();
        sourceFiles.clear();
        testFiles.clear();
    }//GEN-LAST:event_closeAllFilesMenuItemActionPerformed

    private void inputTestGeneratorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTestGeneratorMenuItemActionPerformed
        String actualFile = fileList.getSelectedItem();
        if(actualFile.contains("/"))
        {
            String[] temp = actualFile.split("/");
            actualFile = temp[temp.length-1];
        }
        
        List<SourceFile> sources = new LinkedList<>();
        SourceFile reffered = null;
        for(SourceFile f : sourceFiles)
        {
            if(f.name.equals(actualFile))
            {
                reffered = f;
            }
        }
        if(reffered != null && !reffered.packageName.equals(""))
        {
            for(SourceFile f : sourceFiles)
            {
                if(f.packageName.equals(reffered.packageName))
                {
                    sources.add(f);
                }
            }
        }
        for(TestFile f : testFiles)
        {
            if(f.refFile.equals(actualFile))
            {
                f.generateInputTests(sources);
            }
        }
    }//GEN-LAST:event_inputTestGeneratorMenuItemActionPerformed

    private void closeProjectFilesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeProjectFilesMenuItemActionPerformed
        String actualFileFull = fileList.getSelectedItem();
        String actualPackage = "";
        String actualFile = actualFileFull;
        if(actualFile.contains("/"))
        {
            String[] temp = actualFile.split("/");
            actualFile = temp[temp.length-1];
            actualPackage = temp[temp.length-2];
        }
        List<TestFile> temp = new LinkedList<>();
        for(TestFile f : testFiles)
        {
            if(f.refFile.equals(actualFile) || f.packageName.equals(actualPackage))
            {
                temp.add(f);
            }
        }
        testFiles.removeAll(temp);
        List<SourceFile> temp2 = new LinkedList<>();
        for(SourceFile f : sourceFiles)
        {
            if(f.name.equals(actualFile) || f.packageName.equals(actualPackage))
            {
                temp2.add(f);
            }
        }
        sourceFiles.removeAll(temp);
        originalCodeTextArea.setText("");
        testCodeTextArea.setText("");
        for(String s : fileList.getItems())
        {
            if(s.contains(actualPackage + "/"))
                fileList.remove(s);
        }
        
    }//GEN-LAST:event_closeProjectFilesMenuItemActionPerformed

    private void saveOneFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveOneFileMenuItemActionPerformed
        
        String actualFile = fileList.getSelectedItem();
        if(actualFile.contains("/"))
        {
            String[] temp = actualFile.split("/");
            actualFile = temp[temp.length-1];
        }
        String actualFileName = actualFile.split("[.]")[0];
        TestFile f = null;
        for(TestFile t : testFiles)
        {
             if(t.refFile.equals(actualFile))
             {
                f = t;
             }
        }
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String fileName = chooser.getSelectedFile().getAbsolutePath() + "//" + actualFileName + "Test.java";
            File file = new File(fileName);
            
            try {
                file.createNewFile();
                FileWriter out = new FileWriter(file);
                out.write(f.generatedCode);
                out.close();
            } catch (IOException e) {
                System.out.println("Nie mogę zapisać pliku: "+file.getAbsolutePath());
                System.out.println("Problem: "+e);
            }
        }

    }//GEN-LAST:event_saveOneFileMenuItemActionPerformed

    private void saveProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProjectMenuItemActionPerformed
        String actualFile = fileList.getSelectedItem();
        String actualPackage;
        if(actualFile.contains("/"))
        {
            String[] temp = actualFile.split("/");
            actualPackage = temp[temp.length-2];
        } else {
            return;
        }
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        String destinationFolder;
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            destinationFolder = chooser.getSelectedFile().getAbsolutePath();
        } else {
            return;
        }
        for(String s : fileList.getItems())
        {
            if(s.contains(actualPackage + "/"))
            {
                String[] temp = s.split("/");
                String className = temp[temp.length-1]; 
                String name = className.split("[.]")[0];
                
                TestFile f = null;
                for(TestFile t : testFiles)
                {
                    if(t.refFile.equals(className))
                    {
                        f = t;
                    }
                }
                String fileName = destinationFolder + "//" + name + "Test.java";
                File file = new File(fileName);

                try {
                    file.createNewFile();
                    FileWriter out = new FileWriter(file);
                    out.write(f.generatedCode);
                    out.close();
                } catch (IOException e) {
                    System.out.println("Nie mogę zapisać pliku: "+file.getAbsolutePath());
                    System.out.println("Problem: "+e);
                }
                
            }
        }
        

    }//GEN-LAST:event_saveProjectMenuItemActionPerformed

    private void testCodeTextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_testCodeTextAreaKeyTyped
        String actualFile = fileList.getSelectedItem();
        if(actualFile.contains("/"))
        {
            String[] temp = actualFile.split("/");
            actualFile = temp[temp.length-1];
        }
        for(TestFile f : testFiles)
        {
            if(f.refFile.equals(actualFile))
            {
                f.generatedCode = testCodeTextArea.getText();
            }
        }
    }//GEN-LAST:event_testCodeTextAreaKeyTyped

    private void testCodeTextAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_testCodeTextAreaKeyReleased
        String actualFile = fileList.getSelectedItem();
        if(actualFile.contains("/"))
        {
            String[] temp = actualFile.split("/");
            actualFile = temp[temp.length-1];
        }
        for(TestFile f : testFiles)
        {
            if(f.refFile.equals(actualFile))
            {
                f.generatedCode = testCodeTextArea.getText();
            }
        }
    }//GEN-LAST:event_testCodeTextAreaKeyReleased

    private void saveAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAllMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        String destinationFolder;
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            destinationFolder = chooser.getSelectedFile().getAbsolutePath();
        } else {
            return;
        }
        for(String s : fileList.getItems())
        {
            String className; 
            String name;
            if(s.contains("/"))
            {
                String[] temp = s.split("/");
                className = temp[temp.length-1]; 
                name = className.split("[.]")[0];
            } else {
                className = s; 
                name = s.split("[.]")[0];
            }
            TestFile f = null;
            for(TestFile t : testFiles)
            {
                if(t.refFile.equals(className))
                {
                    f = t;
                }
            }
            String fileName = destinationFolder + "//" + name + "Test.java";
            File file = new File(fileName);

            try {
                file.createNewFile();
                FileWriter out = new FileWriter(file);
                out.write(f.generatedCode);
                out.close();
            } catch (IOException e) {
                System.out.println("Nie mogę zapisać pliku: "+file.getAbsolutePath());
                System.out.println("Problem: "+e);
            }
             
        }
        
    }//GEN-LAST:event_saveAllMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem closeAllFilesMenuItem;
    private javax.swing.JMenuItem closeMenuItem;
    private javax.swing.JMenuItem closeOneFileMenuItem;
    private javax.swing.JMenuItem closeProjectFilesMenuItem;
    private java.awt.List fileList;
    private javax.swing.JMenuItem inputTestGeneratorMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem openFileMenuItem;
    private javax.swing.JMenuItem openProjectMenuItem;
    private javax.swing.JTextArea originalCodeTextArea;
    private javax.swing.JMenuItem saveAllMenuItem;
    private javax.swing.JMenuItem saveOneFileMenuItem;
    private javax.swing.JMenuItem saveProjectMenuItem;
    private javax.swing.JTextArea testCodeTextArea;
    // End of variables declaration//GEN-END:variables

    public List<File> getFileList(File source)
    {
        List<File> lista = new LinkedList<>();
        
        for(File f : source.listFiles())
        {
            if(f.isDirectory())
            {
                lista.addAll(getFileList(f));
            } else {
                String[] extension = f.getName().split("[.]");
                
                if(extension[extension.length - 1].equals("java"))
                {
                    lista.add(f);
                }
            }
        }
        
        return lista;
    }
    
    public void refreshTextAreas(String name)
    {
        for(SourceFile f : sourceFiles)
        {
            if(f.name.equals(name))
            {
                originalCodeTextArea.setText(f.source);
            }
        }
        
        for(TestFile f : testFiles)
        {
            if(f.refFile.equals(name))
            {
                testCodeTextArea.setText(f.generatedCode);
            }
        }
        
        
    }
}
